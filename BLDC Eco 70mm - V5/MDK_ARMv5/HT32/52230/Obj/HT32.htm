<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\52230\Obj\HT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\52230\Obj\HT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Mar 29 09:26:14 2023
<BR><P>
<H3>Maximum Stack Usage =        140 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; motor_1phase_init &rArr; inverter_1phase_init_config &rArr; board_hardware_configuration &rArr; micro_config &rArr; RETARGET_Configuration &rArr; HT32F_DVB_COMInit &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[11]">BFTM0_IRQHandler</a> from al00_micro_ht32f52230.o(i.BFTM0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[16]">BootProcess</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from al00_micro_ht32f52230.o(i.EXTI0_1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from al00_micro_ht32f52230.o(i.EXTI2_3_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from al00_micro_ht32f52230.o(i.EXTI4_15_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[e]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[12]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[7]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from ht32f5xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[21]">Reset_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[f]">SCTM0_IRQHandler</a> from al00_micro_ht32f52230.o(i.SCTM0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[10]">SCTM1_IRQHandler</a> from al00_micro_ht32f52230.o(i.SCTM1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[13]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from ht32f5xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from al00_micro_ht32f52230.o(i.SysTick_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[17]">SystemInit</a> from system_ht32f5xxxx_02.o(i.SystemInit) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[15]">UART0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[14]">USART0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[18]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1e]">advance_commutation_timer_callback</a> from al03_motor_1phase_driver.o(i.advance_commutation_timer_callback) referenced from al03_motor_1phase_driver.o(i.motor_1phase_init)
 <LI><a href="#[1a]">current_sensor_i_peak_callback</a> from al02_inverter_1phase.o(i.current_sensor_i_peak_callback) referenced from al02_inverter_1phase.o(i.inverter_1phase_init_config)
 <LI><a href="#[20]">empty_func_to_avoid_hard_fault</a> from al00_micro_ht32f52230.o(i.empty_func_to_avoid_hard_fault) referenced 36 times from al00_micro_ht32f52230.o(.data)
 <LI><a href="#[1c]">hall_sensor_falling_event_callback</a> from al03_motor_1phase_driver.o(i.hall_sensor_falling_event_callback) referenced from al03_motor_1phase_driver.o(i.motor_1phase_init)
 <LI><a href="#[1b]">hall_sensor_rising_event_callback</a> from al03_motor_1phase_driver.o(i.hall_sensor_rising_event_callback) referenced from al03_motor_1phase_driver.o(i.motor_1phase_init)
 <LI><a href="#[19]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1f]">motor_measure_timer_callback</a> from al03_motor_1phase_driver.o(i.motor_measure_timer_callback) referenced from al03_motor_1phase_driver.o(i.motor_1phase_init)
 <LI><a href="#[1d]">motor_watchdog_timer_callback</a> from al03_motor_1phase_driver.o(i.motor_watchdog_timer_callback) referenced from al03_motor_1phase_driver.o(i.motor_1phase_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))

<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[23]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[24]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[12]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[27]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[28]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[7]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2a]"></a>MIDI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2b]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2c]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2d]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2e]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2f]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[30]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[31]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[32]"></a>SCTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[33]"></a>SCTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[13]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[15]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[36]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[37]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[14]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[39]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[18]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3c]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[a6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[a8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Configuration
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_adc_config
</UL>

<P><STRONG><a name="[5a]"></a>ADC_GetConversionData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_GetConversionData))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_adc_get_measure
</UL>

<P><STRONG><a name="[87]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ht32f5xxxx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_adc_config
</UL>

<P><STRONG><a name="[85]"></a>ADC_RegularGroupConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_RegularGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_adc_config
</UL>

<P><STRONG><a name="[88]"></a>ADC_RegularTrigConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_RegularTrigConfig))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_adc_config
</UL>

<P><STRONG><a name="[86]"></a>ADC_SamplingTimeConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_SamplingTimeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_adc_config
</UL>

<P><STRONG><a name="[8a]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_adc_config
</UL>

<P><STRONG><a name="[94]"></a>AFIO_EXTISourceConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht32f5xxxx_gpio.o(i.AFIO_EXTISourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AFIO_EXTISourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_edge_events_config
</UL>

<P><STRONG><a name="[49]"></a>AFIO_GPxConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_pwm_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_outputs_pp_config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_inputs_pullup_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_hiz_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_edge_events_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_adc_config
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_COMInit
</UL>

<P><STRONG><a name="[11]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.BFTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BFTM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>BFTM_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
</UL>

<P><STRONG><a name="[6f]"></a>BFTM_EnaCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_EnaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[70]"></a>BFTM_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[9a]"></a>BFTM_OneShotModeCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_OneShotModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
</UL>

<P><STRONG><a name="[72]"></a>BFTM_SetCompare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
</UL>

<P><STRONG><a name="[71]"></a>BFTM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[40]"></a>CKCU_Configuration</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.CKCU_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_Configuration &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[42]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
</UL>

<P><STRONG><a name="[43]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[45]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[41]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_outputs_pp_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_edge_events_config
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_COMInit
</UL>

<P><STRONG><a name="[84]"></a>CKCU_SetADCPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_SetADCPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_adc_config
</UL>

<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, al00_micro_ht32f52230.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_1_IRQHandler &rArr; EXTI_GetEdgeStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeStatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, al00_micro_ht32f52230.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI2_3_IRQHandler &rArr; EXTI_GetEdgeStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeStatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 538 bytes, Stack size 16 bytes, al00_micro_ht32f52230.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_15_IRQHandler &rArr; EXTI_GetEdgeStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeStatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI_ClearEdgeFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_ClearEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>EXTI_GetEdgeStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ht32f5xxxx_exti.o(i.EXTI_GetEdgeStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_GetEdgeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>EXTI_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_edge_events_config
</UL>

<P><STRONG><a name="[91]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_outputs_pp_config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_inputs_pullup_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_hiz_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_edge_events_config
</UL>

<P><STRONG><a name="[97]"></a>GPIO_DriveConfig</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, ht32f5xxxx_gpio.o(i.GPIO_DriveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_outputs_pp_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_hiz_config
</UL>

<P><STRONG><a name="[93]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_inputs_pullup_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_edge_events_config
</UL>

<P><STRONG><a name="[92]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_outputs_pp_config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_inputs_pullup_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_hiz_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_edge_events_config
</UL>

<P><STRONG><a name="[a0]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_hall_sensor_state
</UL>

<P><STRONG><a name="[68]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_WriteOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_set_seq
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Temp_task
</UL>

<P><STRONG><a name="[48]"></a>HT32F_DVB_COMInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ht32_board.o(i.HT32F_DVB_COMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HT32F_DVB_COMInit &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_Configuration
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>NVIC_Configuration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[4d]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RETARGET_Configuration</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ht32_retarget.o(i.RETARGET_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RETARGET_Configuration &rArr; HT32F_DVB_COMInit &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_COMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[f]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.SCTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCTM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.SCTM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCTM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Configuration
</UL>

<P><STRONG><a name="[50]"></a>SYSTICK_Configuration</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.SYSTICK_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SYSTICK_Configuration &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_SetReloadValue
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[54]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Configuration
</UL>

<P><STRONG><a name="[53]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Configuration
</UL>

<P><STRONG><a name="[52]"></a>SYSTICK_SetReloadValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_SetReloadValue))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Configuration
</UL>

<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, al00_micro_ht32f52230.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SystemInit</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, system_ht32f5xxxx_02.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Systick_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, al00_micro_ht32f52230.o(i.Systick_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_load_timer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_is_time_expired
</UL>

<P><STRONG><a name="[7c]"></a>TM_ChannelConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ht32f5xxxx_tm.o(i.TM_ChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_set_seq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_pwm_config
</UL>

<P><STRONG><a name="[4f]"></a>TM_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTM1_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTM0_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
</UL>

<P><STRONG><a name="[9b]"></a>TM_ClearIntPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
</UL>

<P><STRONG><a name="[55]"></a>TM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_measure_timer_callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_meas_rotation_speed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_advance_comm_action
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_commutation_timer_callback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_pwm_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[78]"></a>TM_GetCaptureCompare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_GetCaptureCompare))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_outputs_to_toff
</UL>

<P><STRONG><a name="[a1]"></a>TM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_meas_rotation_speed
</UL>

<P><STRONG><a name="[56]"></a>TM_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_measure_timer_callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_meas_rotation_speed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_advance_comm_action
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_commutation_timer_callback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[99]"></a>TM_OutputInit</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ht32f5xxxx_tm.o(i.TM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TM_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_pwm_config
</UL>

<P><STRONG><a name="[79]"></a>TM_SetCaptureCompare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_SetCaptureCompare))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_toff_us
</UL>

<P><STRONG><a name="[57]"></a>TM_SetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_measure_timer_callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_meas_rotation_speed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_advance_comm_action
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_commutation_timer_callback
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_start_with_ton
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_outputs_to_toff
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[73]"></a>TM_SetCounterReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_SetCounterReload))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_measure_timer_callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_meas_rotation_speed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_advance_comm_action
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_period_us
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
</UL>

<P><STRONG><a name="[98]"></a>TM_TimeBaseInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_pwm_config
</UL>

<P><STRONG><a name="[4a]"></a>USART_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ht32f5xxxx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_COMInit
</UL>

<P><STRONG><a name="[4b]"></a>USART_TxRxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_TxRxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_COMInit
</UL>

<P><STRONG><a name="[9f]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, al03_motor_1phase_driver.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
</UL>

<P><STRONG><a name="[aa]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ab]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ac]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1e]"></a>advance_commutation_timer_callback</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, al03_motor_1phase_driver.o(i.advance_commutation_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = advance_commutation_timer_callback &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_set_seq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> al03_motor_1phase_driver.o(i.motor_1phase_init)
</UL>
<P><STRONG><a name="[59]"></a>board_adc_get_measure</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, al01_board_motor_dev_rev2019_01.o(i.board_adc_get_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = board_adc_get_measure
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionData
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_get_mosfets_temperature_C
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_get_bus_voltage
</UL>

<P><STRONG><a name="[5b]"></a>board_get_bus_voltage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, al01_board_motor_dev_rev2019_01.o(i.board_get_bus_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = board_get_bus_voltage &rArr; board_adc_get_measure
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_adc_get_measure
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_VBus_task
</UL>

<P><STRONG><a name="[5c]"></a>board_get_mosfets_temperature_C</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, al01_board_motor_dev_rev2019_01.o(i.board_get_mosfets_temperature_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = board_get_mosfets_temperature_C &rArr; board_adc_get_measure
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_adc_get_measure
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Temp_task
</UL>

<P><STRONG><a name="[5d]"></a>board_hardware_configuration</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, al01_board_motor_dev_rev2019_01.o(i.board_hardware_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = board_hardware_configuration &rArr; micro_config &rArr; RETARGET_Configuration &rArr; HT32F_DVB_COMInit &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_gpio_config_output_pp_pins_load_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_gpio_config_inputs_pins_load_config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_gpio_config_hiz_pins_load_config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_gpio_config_edge_events_pins_load_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_init_config
</UL>

<P><STRONG><a name="[63]"></a>board_scheduler_is_time_expired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, al01_board_motor_dev_rev2019_01.o(i.board_scheduler_is_time_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = board_scheduler_is_time_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_VBus_task
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Temp_task
</UL>

<P><STRONG><a name="[65]"></a>board_scheduler_load_timer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, al01_board_motor_dev_rev2019_01.o(i.board_scheduler_load_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = board_scheduler_load_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_first_steps_action
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_VBus_task
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Temp_task
</UL>

<P><STRONG><a name="[66]"></a>check_Temp_task</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, main.o(i.check_Temp_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_Temp_task &rArr; motor_1phase_stop_motor &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_load_timer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_is_time_expired
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_get_mosfets_temperature_C
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>check_VBus_task</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, main.o(i.check_VBus_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_VBus_task &rArr; motor_1phase_stop_motor &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_high_speed
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_load_timer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_is_time_expired
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_get_bus_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>empty_func_to_avoid_hard_fault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, al00_micro_ht32f52230.o(i.empty_func_to_avoid_hard_fault))
<BR>[Address Reference Count : 1]<UL><LI> al00_micro_ht32f52230.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>hall_sensor_event</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, al03_motor_1phase_driver.o(i.hall_sensor_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hall_sensor_event &rArr; hall_sensor_event_first_steps_action &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_first_steps_action
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_advance_comm_action
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_rising_event_callback
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_falling_event_callback
</UL>

<P><STRONG><a name="[6e]"></a>hall_sensor_event_advance_comm_action</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, al03_motor_1phase_driver.o(i.hall_sensor_event_advance_comm_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hall_sensor_event_advance_comm_action
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounterReload
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event
</UL>

<P><STRONG><a name="[6d]"></a>hall_sensor_event_first_steps_action</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, al03_motor_1phase_driver.o(i.hall_sensor_event_first_steps_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hall_sensor_event_first_steps_action &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_hall_sensor_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_set_seq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_toff_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_period_us
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_load_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event
</UL>

<P><STRONG><a name="[1c]"></a>hall_sensor_falling_event_callback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, al03_motor_1phase_driver.o(i.hall_sensor_falling_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hall_sensor_falling_event_callback &rArr; hall_sensor_event &rArr; hall_sensor_event_first_steps_action &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_meas_rotation_speed
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> al03_motor_1phase_driver.o(i.motor_1phase_init)
</UL>
<P><STRONG><a name="[1b]"></a>hall_sensor_rising_event_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, al03_motor_1phase_driver.o(i.hall_sensor_rising_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hall_sensor_rising_event_callback &rArr; hall_sensor_event &rArr; hall_sensor_event_first_steps_action &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> al03_motor_1phase_driver.o(i.motor_1phase_init)
</UL>
<P><STRONG><a name="[60]"></a>hardware_gpio_config_edge_events_pins_load_config</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, al00_micro_ht32f52230.o(i.hardware_gpio_config_edge_events_pins_load_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hardware_gpio_config_edge_events_pins_load_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_hardware_configuration
</UL>

<P><STRONG><a name="[5f]"></a>hardware_gpio_config_hiz_pins_load_config</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, al00_micro_ht32f52230.o(i.hardware_gpio_config_hiz_pins_load_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hardware_gpio_config_hiz_pins_load_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_hardware_configuration
</UL>

<P><STRONG><a name="[61]"></a>hardware_gpio_config_inputs_pins_load_config</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, al00_micro_ht32f52230.o(i.hardware_gpio_config_inputs_pins_load_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hardware_gpio_config_inputs_pins_load_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_hardware_configuration
</UL>

<P><STRONG><a name="[5e]"></a>hardware_gpio_config_output_pp_pins_load_config</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, al00_micro_ht32f52230.o(i.hardware_gpio_config_output_pp_pins_load_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hardware_gpio_config_output_pp_pins_load_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_hardware_configuration
</UL>

<P><STRONG><a name="[7e]"></a>hardware_gpio_event_falling_event_link_callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, al00_micro_ht32f52230.o(i.hardware_gpio_event_falling_event_link_callback))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_init_config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[9c]"></a>hardware_gpio_event_rising_event_link_callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, al00_micro_ht32f52230.o(i.hardware_gpio_event_rising_event_link_callback))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[6b]"></a>hardware_pwm_set_outputs_to_toff</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.hardware_pwm_set_outputs_to_toff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hardware_pwm_set_outputs_to_toff
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounter
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetCaptureCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_sensor_i_peak_callback
</UL>

<P><STRONG><a name="[75]"></a>hardware_pwm_set_period_us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.hardware_pwm_set_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hardware_pwm_set_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounterReload
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_first_steps_action
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_init_config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
</UL>

<P><STRONG><a name="[76]"></a>hardware_pwm_set_toff_us</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, al00_micro_ht32f52230.o(i.hardware_pwm_set_toff_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hardware_pwm_set_toff_us
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCaptureCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_first_steps_action
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_init_config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
</UL>

<P><STRONG><a name="[7a]"></a>hardware_pwm_start_with_ton</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.hardware_pwm_start_with_ton))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hardware_pwm_start_with_ton
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_set_seq
</UL>

<P><STRONG><a name="[9d]"></a>hardware_tim_link_callback</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, al00_micro_ht32f52230.o(i.hardware_tim_link_callback))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[7b]"></a>inverter_1phase_comm_next_seq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, al02_inverter_1phase.o(i.inverter_1phase_comm_next_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inverter_1phase_comm_next_seq &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_set_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
</UL>

<P><STRONG><a name="[58]"></a>inverter_1phase_comm_set_seq</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, al02_inverter_1phase.o(i.inverter_1phase_comm_set_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ChannelConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_start_with_ton
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_first_steps_action
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_commutation_timer_callback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_init_config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_next_seq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
</UL>

<P><STRONG><a name="[7d]"></a>inverter_1phase_init_config</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, al02_inverter_1phase.o(i.inverter_1phase_init_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = inverter_1phase_init_config &rArr; board_hardware_configuration &rArr; micro_config &rArr; RETARGET_Configuration &rArr; HT32F_DVB_COMInit &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_set_seq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_toff_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_period_us
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_gpio_event_falling_event_link_callback
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_hardware_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[82]"></a>isMotorStopped</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, al03_motor_1phase_driver.o(i.isMotorStopped))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = main &rArr; motor_1phase_init &rArr; inverter_1phase_init_config &rArr; board_hardware_configuration &rArr; micro_config &rArr; RETARGET_Configuration &rArr; HT32F_DVB_COMInit &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_start_motor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isMotorStopped
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_load_timer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_is_time_expired
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_get_mosfets_temperature_C
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_VBus_task
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Temp_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[62]"></a>micro_config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.micro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = micro_config &rArr; RETARGET_Configuration &rArr; HT32F_DVB_COMInit &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_Configuration
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Configuration
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_pwm_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_outputs_pp_config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_inputs_pullup_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_hiz_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_edge_events_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_adc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_hardware_configuration
</UL>

<P><STRONG><a name="[7f]"></a>motor_1phase_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, al03_motor_1phase_driver.o(i.motor_1phase_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = motor_1phase_init &rArr; inverter_1phase_init_config &rArr; board_hardware_configuration &rArr; micro_config &rArr; RETARGET_Configuration &rArr; HT32F_DVB_COMInit &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_meas_rotation_speed_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_init_config
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_tim_link_callback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_gpio_event_rising_event_link_callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_gpio_event_falling_event_link_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>motor_1phase_start_motor</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, al03_motor_1phase_driver.o(i.motor_1phase_start_motor))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>motor_1phase_state_machine</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, al03_motor_1phase_driver.o(i.motor_1phase_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = motor_1phase_state_machine &rArr; motor_1phase_stop_motor &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_hall_sensor_state
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_set_seq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_next_seq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounterReload
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_toff_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_period_us
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_load_timer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_scheduler_is_time_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>motor_1phase_stop_motor</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, al03_motor_1phase_driver.o(i.motor_1phase_stop_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = motor_1phase_stop_motor &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverter_1phase_comm_set_seq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_watchdog_timer_callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_VBus_task
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Temp_task
</UL>

<P><STRONG><a name="[74]"></a>motor_hall_sensor_state</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, al03_motor_1phase_driver.o(i.motor_hall_sensor_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_hall_sensor_state
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_event_first_steps_action
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_state_machine
</UL>

<P><STRONG><a name="[77]"></a>motor_meas_rotation_speed</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, al03_motor_1phase_driver.o(i.motor_meas_rotation_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = motor_meas_rotation_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetCounter
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounterReload
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_sensor_falling_event_callback
</UL>

<P><STRONG><a name="[9e]"></a>motor_meas_rotation_speed_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, al03_motor_1phase_driver.o(i.motor_meas_rotation_speed_init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_init
</UL>

<P><STRONG><a name="[1f]"></a>motor_measure_timer_callback</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, al03_motor_1phase_driver.o(i.motor_measure_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = motor_measure_timer_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounterReload
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> al03_motor_1phase_driver.o(i.motor_1phase_init)
</UL>
<P><STRONG><a name="[1d]"></a>motor_watchdog_timer_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, al03_motor_1phase_driver.o(i.motor_watchdog_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = motor_watchdog_timer_callback &rArr; motor_1phase_stop_motor &rArr; inverter_1phase_comm_set_seq &rArr; TM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_1phase_stop_motor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> al03_motor_1phase_driver.o(i.motor_1phase_init)
</UL>
<P><STRONG><a name="[6a]"></a>set_motor_high_speed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, al03_motor_1phase_driver.o(i.set_motor_high_speed))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_VBus_task
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[96]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, al00_micro_ht32f52230.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_timers_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_gpios_edge_events_config
</UL>

<P><STRONG><a name="[83]"></a>micro_adc_config</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, al00_micro_ht32f52230.o(i.micro_adc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = micro_adc_config &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetADCPrescaler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SamplingTimeConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularTrigConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[8e]"></a>micro_gpios_edge_events_config</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, al00_micro_ht32f52230.o(i.micro_gpios_edge_events_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = micro_gpios_edge_events_config &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTISourceConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[8d]"></a>micro_gpios_hiz_config</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, al00_micro_ht32f52230.o(i.micro_gpios_hiz_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = micro_gpios_hiz_config &rArr; GPIO_DriveConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[8c]"></a>micro_gpios_inputs_pullup_config</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, al00_micro_ht32f52230.o(i.micro_gpios_inputs_pullup_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = micro_gpios_inputs_pullup_config &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[8b]"></a>micro_gpios_outputs_pp_config</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, al00_micro_ht32f52230.o(i.micro_gpios_outputs_pp_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = micro_gpios_outputs_pp_config &rArr; GPIO_DriveConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[8f]"></a>micro_pwm_config</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, al00_micro_ht32f52230.o(i.micro_pwm_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = micro_pwm_config &rArr; TM_OutputInit
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OutputInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ChannelConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[90]"></a>micro_timers_config</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, al00_micro_ht32f52230.o(i.micro_timers_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = micro_timers_config
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearIntPendingBit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_OneShotModeCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_ClearFlag
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_config
</UL>

<P><STRONG><a name="[1a]"></a>current_sensor_i_peak_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, al02_inverter_1phase.o(i.current_sensor_i_peak_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = current_sensor_i_peak_callback &rArr; hardware_pwm_set_outputs_to_toff
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_pwm_set_outputs_to_toff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> al02_inverter_1phase.o(i.inverter_1phase_init_config)
</UL>
<P><STRONG><a name="[16]"></a>BootProcess</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3d]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
